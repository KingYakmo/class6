# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        # Your deployment script here


            - name: Vulnerability Scan GitHub Action for Amazon Inspector
  # You may pin to the exact commit or the version.
  # uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@8c2d4d78eadaf3cdbe387414ca3d15ee5f7895c8
  uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1.1.5
  with:
    # The artifact you would like to scan with Amazon Inspector. Valid choices are "repository", "container", "binary", or "archive".
    artifact_type: # default is repository
    # The file path to the artifact you would like to scan with Amazon Inspector. File paths are relative to the root project directory. If scanning a container image, you must provide a value that follows the docker pull convention: "NAME[:TAG|@DIGEST]", for example, "alpine:latest", or a path to an image exported as tarball using "docker save".
    artifact_path: # default is ./
    # If set to "enabled", the action will display detailed vulnerability findings in the step summary page; see here for an example report: https://github.com/aws-actions/vulnerability-scan-github-action-for-amazon-inspector/actions/runs/8878213714
    display_vulnerability_findings: # default is disabled
    # The destination file path for the generated SBOM.
    output_sbom_path: # optional, default is ./sbom_${{ github.run_id }}.json
    # The destination file path for Inspector's vulnerability scan (JSON format).
    output_inspector_scan_path: # optional, default is inspector_scan_${{ github.run_id }}.json
    # The destination file path for Inspector's vulnerability scan (CSV format).
    output_inspector_scan_path_csv: # optional, default is inspector_scan_${{ github.run_id }}.csv
    # The destination file path for Inspector's vulnerability scan (markdown format).
    output_inspector_scan_path_markdown: # optional, default is inspector_scan_${{ github.run_id }}.md
    # The destination file path for Inspector's Dockerfile vulnerability scan (CSV format).
    output_inspector_dockerfile_scan_path_csv: # optional, default is inspector_dockerfile_scan_${{ github.run_id }}.csv
    # The destination file path for Inspector's Dockerfile vulnerability scan (markdown format).
    output_inspector_dockerfile_scan_path_markdown: # optional, default is inspector_dockerfile_scan_${{ github.run_id }}.md
    # The inspector-sbomgen version you wish to use for SBOM generation. See here for more info: https://docs.aws.amazon.com/inspector/latest/user/sbom-generator.html
    sbomgen_version: # optional, default is latest
    # Specifies the number of critical vulnerabilities needed to set the 'vulnerability_threshold_exceeded' flag.
    critical_threshold: # optional, default is 0
    # Specifies the number of high vulnerabilities needed to set the 'vulnerability_threshold_exceeded' flag.
    high_threshold: # optional, default is 0
    # Specifies the number of medium vulnerabilities needed to set the 'vulnerability_threshold_exceeded' flag.
    medium_threshold: # optional, default is 0
    # Specifies the number of low vulnerabilities needed to set the 'vulnerability_threshold_exceeded' flag.
    low_threshold: # optional, default is 0
    # Specifies the number of other vulnerabilities needed to set the 'vulnerability_threshold_exceeded' flag.
    other_threshold: # optional, default is 0
    # Specifies the file scanners that you would like inspector-sbomgen to execute. By default, inspector-sbomgen will try to run all file scanners that are applicable to the target artifact. If this argument is set, inspector-sbomgen will only execute the specified file scanners. Provide your input as a single string. Separate each file scanner with a comma. To view a list of available file scanners, execute 'inspector-sbomgen list-scanners'. See here for more info: https://docs.aws.amazon.com/inspector/latest/user/sbom-generator.html
    scanners: # optional, default is ''
    # Specifies a list of file scanners that should NOT be executed; this argument cannot be combined with 'scanners'. If this argument is set, inspector-sbomgen will execute all file scanners except those you specified. Provide your input as a single string. Separate each file scanner with a comma. To view a list of available file scanners, execute 'inspector-sbomgen list-scanners'. See here for more info: https://docs.aws.amazon.com/inspector/latest/user/sbom-generator.html
    skip_scanners: # optional, default is ''
    # Specifies one or more files and/or directories that should NOT be inventoried. Separate each file with a comma and enclose the entire string in double quotes.
    skip_files: # optional, default is ''
    # Specifies a timeout in seconds. If this timeout is exceeded, the action will gracefully conclude and present any findings discovered up to that point.
    timeout: # optional, default is 600
    # Specifies the OS and CPU arch of the container image you wish to scan. Valid inputs are of the form 'os/cpu/variant' for example, 'linux/amd64', 'linux/arm64/v8', etc. If no platform is specified, the system will use the same platform as the host that is performing the scan. This argument only affects container image scans. Requires inspector-sbomgen 1.5.1 or later.
    platform: # optional
          


name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
